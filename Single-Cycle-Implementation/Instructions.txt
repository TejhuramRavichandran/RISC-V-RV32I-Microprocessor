R-Type Instructions:
                    li x5, 10       # Load 10 into x5
                    li x6, 5        # Load 5 into x6
                    add x7, x5, x6  # x7 = x5 + x6 = 10 + 5 = 15
                    sub x8, x5, x6  # x8 = x5 - x6 = 10 - 5 = 5
                    and x9, x5, x6  # x9 = x5 & x6 = 10 & 5 = 0
                    or x10, x5, x6  # x10 = x5 | x6 = 10 | 5 = 15
                    xor x11, x5, x6 # x11 = x5 ^ x6 = 10 ^ 5 = 15
                    sll x12, x5, x6 # x12 = x5 << (x6 % 32) = 10 << 5 = 320
                    srl x13, x5, x6 # x13 = x5 >> (x6 % 32) = 10 >> 5 = 0
                    sra x14, x5, x6 # x14 = arithmetic shift 10 by 5 (remains 0)
                    slt x15, x5, x6 # x15 = (10 < 5) ? 1 : 0 = 0
                    sltu x16, x5, x6 # Unsigned comparison (10 < 5) = 0

I-Type Instructions:
                    li x5, 10         # Load 10 into x5
                    addi x6, x5, -5   # x6 = x5 + (-5) = 5
                    andi x7, x5, 3    # x7 = x5 & 3 = 10 & 3 = 2
                    ori x8, x5, 4     # x8 = x5 | 4 = 10 | 4 = 14
                    xori x9, x5, 6    # x9 = x5 ^ 6 = 10 ^ 6 = 12
                    slli x10, x5, 2   # x10 = x5 << 2 = 10 << 2 = 40
                    srli x11, x5, 1   # x11 = x5 >> 1 = 10 >> 1 = 5
                    srai x12, x5, 1   # x12 = signed shift 10 >> 1 = 5
                    slti x13, x5, 20  # x13 = (10 < 20) ? 1 : 0 = 1
                    sltiu x14, x5, -1 # x14 = (10 < unsigned -1) ? 1 : 0 = 1

B-Type Instructions:
                    li x5, 10
                    li x6, 10
                    li x7, 5
                    beq x5, x6, equal_label  # If x5 == x6, branch
                    li x8, 1                 # This will be skipped if branch taken
                equal_label:
                    li x8, 2                 # x8 = 2 if branch taken
                    bne x5, x7, not_equal_label # If x5 != x7, branch
                    li x9, 3                 # This will be skipped if branch taken
                not_equal_label:
                    li x9, 4                 # x9 = 4 if branch taken
                    blt x7, x5, less_label   # If x7 < x5, branch
                    li x10, 5                # This will be skipped if branch taken
                less_label:
                    li x10, 6                # x10 = 6 if branch taken
                    bge x5, x7, greater_equal_label # If x5 >= x7, branch
                    li x11, 7                # This will be skipped if branch taken
                greater_equal_label:
                    li x11, 8                # x11 = 8 if branch taken

J-Type Instructions:
                    li x5, 100      # Load value into x5
                    j jump_label    # Jump unconditionally
                    li x6, 200      # This instruction is skipped
                jump_label:
                    li x6, 300      # x6 = 300 after the jump
                    li x7, return_here
                    jal x8, subroutine  # Jump and Link to 'subroutine'
                return_here:
                    addi x8, x8, 4  # Adjust return address
                    j end_of_program
                subroutine:
                    li x9, 500      # x9 = 500
                    jalr x0, x7, 0  # Return to return_here
                end_of_program:

Memory Instructions:
 
    		li x5, 0x1000    # Assume memory address 0x1000 (change as needed)
    		li x6, 1234      # Load value 1234 into x6
		sw x6, 0(x5)     # Store word at address in x5
		li x7, 0xABCD    # Load half-word value
		sh x7, 2(x5)     # Store half-word at address x5 + 2

    		li x8, 0xEF      # Load byte value
    		sb x8, 3(x5)     # Store byte at address x5 + 3
	
    		lw x9, 0(x5)     # Load word back into x9
   		 lh x10, 2(x5)    # Load half-word into x10
   		 lb x11, 3(x5)    # Load byte into x11
   		 lhu x12, 2(x5)   # Load half-word unsigned into x12
  		  lbu x13, 3(x5)   # Load byte unsigned into x13



U Type:
		    lui x5, 0x12345         # x5 = 0x12345000 (Load immediate into upper bits)
		    lui x6, 0xFFFFF         # x6 = 0xFFFFF000 (Sign-extension check)
		
		    auipc x7, 0x1           # x7 = PC + 0x1000  (Add upper immediate to PC)
		    auipc x8, 0xABCDE       # x8 = PC + 0xABCDE000 (Check PC-relative computation)
